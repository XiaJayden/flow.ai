// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  name        String?
  password    String
  instruments String   // JSON string array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  bandMembers   BandMember[]
  annotations   Annotation[]
  comments      Comment[]
  announcements Announcement[]
  events        BandEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Band {
  id        String   @id @default(cuid())
  name      String
  joinCode  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members       BandMember[]
  songs         Song[]
  setlists      Setlist[]
  announcements Announcement[]
  events        BandEvent[]
}

model BandMember {
  id     String @id @default(cuid())
  userId String
  bandId String
  role   String @default("member") // "admin" | "member"
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  band Band @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@unique([userId, bandId])
}

model Song {
  id          String   @id @default(cuid())
  bandId      String
  title       String
  artist      String?
  youtubeId   String
  duration    Float    // in seconds
  thumbnail   String?
  instruments String   @default("[]") // JSON string array of instruments used in this song
  addedAt     DateTime @default(now())

  band        Band         @relation(fields: [bandId], references: [id], onDelete: Cascade)
  annotations Annotation[]
  setlistSongs SetlistSong[]

  @@unique([bandId, youtubeId])
}

model Setlist {
  id        String   @id @default(cuid())
  bandId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  band         Band          @relation(fields: [bandId], references: [id], onDelete: Cascade)
  setlistSongs SetlistSong[]

  @@unique([bandId, name])
}

model SetlistSong {
  id        String @id @default(cuid())
  setlistId String
  songId    String
  order     Int    @default(0) // for ordering songs within setlist

  setlist Setlist @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  song    Song    @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([setlistId, songId])
}

model Annotation {
  id          String   @id @default(cuid())
  songId      String
  userId      String
  timestamp   Float    // in seconds
  content     String
  instruments String   // JSON string array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  song     Song      @relation(fields: [songId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id           String   @id @default(cuid())
  annotationId String
  userId       String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  annotation Annotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  bandId    String
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  band Band @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BandEvent {
  id          String   @id @default(cuid())
  bandId      String
  userId      String
  title       String
  description String?
  eventType   String   // "practice", "gig", "songwriting", "meeting", etc.
  eventDate   DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  band Band @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}